/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface DaiUsdcLiquidityInterface extends ethers.utils.Interface {
  functions: {
    "DAI()": FunctionFragment;
    "USDC()": FunctionFragment;
    "collectAllFees(uint256)": FunctionFragment;
    "decreaseLiquidityInHalf(uint256)": FunctionFragment;
    "deposits(uint256)": FunctionFragment;
    "increaseLiquidityCurrentRange(uint256,uint256,uint256)": FunctionFragment;
    "mintNewPosition()": FunctionFragment;
    "nonfungiblePositionManager()": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "poolFee()": FunctionFragment;
    "retrieveNFT(uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "DAI", values?: undefined): string;
  encodeFunctionData(functionFragment: "USDC", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "collectAllFees",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "decreaseLiquidityInHalf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deposits",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseLiquidityCurrentRange",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintNewPosition",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nonfungiblePositionManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "poolFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "retrieveNFT",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "DAI", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "USDC", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "collectAllFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decreaseLiquidityInHalf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposits", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "increaseLiquidityCurrentRange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintNewPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nonfungiblePositionManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "poolFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "retrieveNFT",
    data: BytesLike
  ): Result;

  events: {};
}

export class DaiUsdcLiquidity extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: DaiUsdcLiquidityInterface;

  functions: {
    DAI(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "DAI()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    USDC(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "USDC()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    collectAllFees(
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "collectAllFees(uint256)"(
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    decreaseLiquidityInHalf(
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "decreaseLiquidityInHalf(uint256)"(
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    deposits(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      owner: string;
      liquidity: BigNumber;
      token0: string;
      token1: string;
      0: string;
      1: BigNumber;
      2: string;
      3: string;
    }>;

    "deposits(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      owner: string;
      liquidity: BigNumber;
      token0: string;
      token1: string;
      0: string;
      1: BigNumber;
      2: string;
      3: string;
    }>;

    increaseLiquidityCurrentRange(
      tokenId: BigNumberish,
      amountAdd0: BigNumberish,
      amountAdd1: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "increaseLiquidityCurrentRange(uint256,uint256,uint256)"(
      tokenId: BigNumberish,
      amountAdd0: BigNumberish,
      amountAdd1: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    mintNewPosition(overrides?: Overrides): Promise<ContractTransaction>;

    "mintNewPosition()"(overrides?: Overrides): Promise<ContractTransaction>;

    nonfungiblePositionManager(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "nonfungiblePositionManager()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    onERC721Received(
      operator: string,
      arg1: string,
      tokenId: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "onERC721Received(address,address,uint256,bytes)"(
      operator: string,
      arg1: string,
      tokenId: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    poolFee(overrides?: CallOverrides): Promise<{
      0: number;
    }>;

    "poolFee()"(overrides?: CallOverrides): Promise<{
      0: number;
    }>;

    retrieveNFT(
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "retrieveNFT(uint256)"(
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  DAI(overrides?: CallOverrides): Promise<string>;

  "DAI()"(overrides?: CallOverrides): Promise<string>;

  USDC(overrides?: CallOverrides): Promise<string>;

  "USDC()"(overrides?: CallOverrides): Promise<string>;

  collectAllFees(
    tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "collectAllFees(uint256)"(
    tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  decreaseLiquidityInHalf(
    tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "decreaseLiquidityInHalf(uint256)"(
    tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  deposits(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    owner: string;
    liquidity: BigNumber;
    token0: string;
    token1: string;
    0: string;
    1: BigNumber;
    2: string;
    3: string;
  }>;

  "deposits(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    owner: string;
    liquidity: BigNumber;
    token0: string;
    token1: string;
    0: string;
    1: BigNumber;
    2: string;
    3: string;
  }>;

  increaseLiquidityCurrentRange(
    tokenId: BigNumberish,
    amountAdd0: BigNumberish,
    amountAdd1: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "increaseLiquidityCurrentRange(uint256,uint256,uint256)"(
    tokenId: BigNumberish,
    amountAdd0: BigNumberish,
    amountAdd1: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  mintNewPosition(overrides?: Overrides): Promise<ContractTransaction>;

  "mintNewPosition()"(overrides?: Overrides): Promise<ContractTransaction>;

  nonfungiblePositionManager(overrides?: CallOverrides): Promise<string>;

  "nonfungiblePositionManager()"(overrides?: CallOverrides): Promise<string>;

  onERC721Received(
    operator: string,
    arg1: string,
    tokenId: BigNumberish,
    arg3: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "onERC721Received(address,address,uint256,bytes)"(
    operator: string,
    arg1: string,
    tokenId: BigNumberish,
    arg3: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  poolFee(overrides?: CallOverrides): Promise<number>;

  "poolFee()"(overrides?: CallOverrides): Promise<number>;

  retrieveNFT(
    tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "retrieveNFT(uint256)"(
    tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    DAI(overrides?: CallOverrides): Promise<string>;

    "DAI()"(overrides?: CallOverrides): Promise<string>;

    USDC(overrides?: CallOverrides): Promise<string>;

    "USDC()"(overrides?: CallOverrides): Promise<string>;

    collectAllFees(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      amount0: BigNumber;
      amount1: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "collectAllFees(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      amount0: BigNumber;
      amount1: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    decreaseLiquidityInHalf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      amount0: BigNumber;
      amount1: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "decreaseLiquidityInHalf(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      amount0: BigNumber;
      amount1: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    deposits(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      owner: string;
      liquidity: BigNumber;
      token0: string;
      token1: string;
      0: string;
      1: BigNumber;
      2: string;
      3: string;
    }>;

    "deposits(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      owner: string;
      liquidity: BigNumber;
      token0: string;
      token1: string;
      0: string;
      1: BigNumber;
      2: string;
      3: string;
    }>;

    increaseLiquidityCurrentRange(
      tokenId: BigNumberish,
      amountAdd0: BigNumberish,
      amountAdd1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      liquidity: BigNumber;
      amount0: BigNumber;
      amount1: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;

    "increaseLiquidityCurrentRange(uint256,uint256,uint256)"(
      tokenId: BigNumberish,
      amountAdd0: BigNumberish,
      amountAdd1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      liquidity: BigNumber;
      amount0: BigNumber;
      amount1: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;

    mintNewPosition(overrides?: CallOverrides): Promise<{
      tokenId: BigNumber;
      liquidity: BigNumber;
      amount0: BigNumber;
      amount1: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
    }>;

    "mintNewPosition()"(overrides?: CallOverrides): Promise<{
      tokenId: BigNumber;
      liquidity: BigNumber;
      amount0: BigNumber;
      amount1: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
    }>;

    nonfungiblePositionManager(overrides?: CallOverrides): Promise<string>;

    "nonfungiblePositionManager()"(overrides?: CallOverrides): Promise<string>;

    onERC721Received(
      operator: string,
      arg1: string,
      tokenId: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "onERC721Received(address,address,uint256,bytes)"(
      operator: string,
      arg1: string,
      tokenId: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    poolFee(overrides?: CallOverrides): Promise<number>;

    "poolFee()"(overrides?: CallOverrides): Promise<number>;

    retrieveNFT(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "retrieveNFT(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    DAI(overrides?: CallOverrides): Promise<BigNumber>;

    "DAI()"(overrides?: CallOverrides): Promise<BigNumber>;

    USDC(overrides?: CallOverrides): Promise<BigNumber>;

    "USDC()"(overrides?: CallOverrides): Promise<BigNumber>;

    collectAllFees(
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "collectAllFees(uint256)"(
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    decreaseLiquidityInHalf(
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "decreaseLiquidityInHalf(uint256)"(
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    deposits(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "deposits(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increaseLiquidityCurrentRange(
      tokenId: BigNumberish,
      amountAdd0: BigNumberish,
      amountAdd1: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "increaseLiquidityCurrentRange(uint256,uint256,uint256)"(
      tokenId: BigNumberish,
      amountAdd0: BigNumberish,
      amountAdd1: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    mintNewPosition(overrides?: Overrides): Promise<BigNumber>;

    "mintNewPosition()"(overrides?: Overrides): Promise<BigNumber>;

    nonfungiblePositionManager(overrides?: CallOverrides): Promise<BigNumber>;

    "nonfungiblePositionManager()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onERC721Received(
      operator: string,
      arg1: string,
      tokenId: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "onERC721Received(address,address,uint256,bytes)"(
      operator: string,
      arg1: string,
      tokenId: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    poolFee(overrides?: CallOverrides): Promise<BigNumber>;

    "poolFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    retrieveNFT(
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "retrieveNFT(uint256)"(
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DAI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "DAI()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    USDC(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "USDC()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    collectAllFees(
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "collectAllFees(uint256)"(
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    decreaseLiquidityInHalf(
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "decreaseLiquidityInHalf(uint256)"(
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    deposits(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "deposits(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    increaseLiquidityCurrentRange(
      tokenId: BigNumberish,
      amountAdd0: BigNumberish,
      amountAdd1: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "increaseLiquidityCurrentRange(uint256,uint256,uint256)"(
      tokenId: BigNumberish,
      amountAdd0: BigNumberish,
      amountAdd1: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    mintNewPosition(overrides?: Overrides): Promise<PopulatedTransaction>;

    "mintNewPosition()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    nonfungiblePositionManager(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "nonfungiblePositionManager()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onERC721Received(
      operator: string,
      arg1: string,
      tokenId: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "onERC721Received(address,address,uint256,bytes)"(
      operator: string,
      arg1: string,
      tokenId: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    poolFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "poolFee()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    retrieveNFT(
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "retrieveNFT(uint256)"(
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
